// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RSSVibe.Data;

#nullable disable

namespace RSSVibe.Data.Migrations
{
    [DbContext(typeof(RssVibeDbContext))]
    [Migration("20251016131058_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.Feed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnalysisId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Etag")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastParseStatus")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastParsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("NextParseAfter")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedSourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<short>("TtlMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)60);

                    b.Property<string>("UpdateIntervalUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("UpdateIntervalValue")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId")
                        .IsUnique();

                    b.HasIndex("NextParseAfter", "LastParseStatus");

                    b.HasIndex("UserId", "NormalizedSourceUrl")
                        .IsUnique();

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.FeedAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AiModel")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("AnalysisCompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("AnalysisStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AnalysisStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<Guid?>("ApprovedFeedId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("NormalizedUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreflightChecks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<string[]>("Warnings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisStatus", "CreatedAt")
                        .IsDescending(false, true);

                    b.HasIndex("UserId", "NormalizedUrl")
                        .IsUnique();

                    b.ToTable("FeedAnalyses");
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.FeedItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("DiscoveredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("FeedId")
                        .HasColumnType("uuid");

                    b.Property<string>("Fingerprint")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character(64)")
                        .IsFixedLength();

                    b.Property<Guid?>("FirstParseRunId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastParseRunId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastSeenAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("NormalizedSourceUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTimeOffset?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Summary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FirstParseRunId");

                    b.HasIndex("LastParseRunId");

                    b.HasIndex("FeedId", "Fingerprint")
                        .IsUnique();

                    b.HasIndex("FeedId", "LastSeenAt")
                        .IsDescending(false, true);

                    b.HasIndex("FeedId", "NormalizedSourceUrl")
                        .IsUnique();

                    b.HasIndex("FeedId", "PublishedAt")
                        .IsDescending(false, true);

                    b.ToTable("FeedItems");
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.FeedParseRun", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("FailureReason")
                        .HasColumnType("text");

                    b.Property<Guid>("FeedId")
                        .HasColumnType("uuid");

                    b.Property<int>("FetchedItemsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<short?>("HttpStatusCode")
                        .HasColumnType("smallint");

                    b.Property<int>("NewItemsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("SkippedItemsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UpdatedItemsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasFilter("\"Status\" = 'failed'");

                    b.HasIndex("FeedId", "StartedAt")
                        .IsDescending(false, true);

                    b.ToTable("FeedParseRuns");
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.FeedParseRunItem", b =>
                {
                    b.Property<Guid>("FeedParseRunId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeedItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangeKind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("SeenAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("FeedParseRunId", "FeedItemId");

                    b.HasIndex("FeedItemId", "SeenAt")
                        .IsDescending(false, true);

                    b.HasIndex("FeedParseRunId", "ChangeKind");

                    b.ToTable("FeedParseRunItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RSSVibe.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RSSVibe.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RSSVibe.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RSSVibe.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.Feed", b =>
                {
                    b.HasOne("RSSVibe.Data.Entities.FeedAnalysis", "Analysis")
                        .WithOne("ApprovedFeed")
                        .HasForeignKey("RSSVibe.Data.Entities.Feed", "AnalysisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RSSVibe.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RSSVibe.Data.Models.FeedSelectors", "Selectors", b1 =>
                        {
                            b1.Property<Guid>("FeedId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Author")
                                .HasColumnType("text");

                            b1.Property<Dictionary<string, string>>("CustomSelectors")
                                .HasColumnType("hstore");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<string>("Image")
                                .HasColumnType("text");

                            b1.Property<string>("ItemContainer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Link")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PublishedDate")
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("FeedId");

                            b1.ToTable("Feeds");

                            b1.ToJson("Selectors");

                            b1.WithOwner()
                                .HasForeignKey("FeedId");
                        });

                    b.Navigation("Analysis");

                    b.Navigation("Selectors")
                        .IsRequired();
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.FeedAnalysis", b =>
                {
                    b.HasOne("RSSVibe.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RSSVibe.Data.Models.FeedSelectors", "Selectors", b1 =>
                        {
                            b1.Property<Guid>("FeedAnalysisId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Author")
                                .HasColumnType("text");

                            b1.Property<Dictionary<string, string>>("CustomSelectors")
                                .HasColumnType("hstore");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<string>("Image")
                                .HasColumnType("text");

                            b1.Property<string>("ItemContainer")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Link")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PublishedDate")
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("FeedAnalysisId");

                            b1.ToTable("FeedAnalyses");

                            b1.ToJson("Selectors");

                            b1.WithOwner()
                                .HasForeignKey("FeedAnalysisId");
                        });

                    b.OwnsOne("RSSVibe.Data.Models.FeedPreflightDetails", "PreflightDetails", b1 =>
                        {
                            b1.Property<Guid>("FeedAnalysisId")
                                .HasColumnType("uuid");

                            b1.Property<Dictionary<string, string>>("AdditionalInfo")
                                .HasColumnType("hstore");

                            b1.Property<string>("ErrorMessage")
                                .HasColumnType("text");

                            b1.Property<bool>("HasInvalidMarkup")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsPaywalled")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsRateLimited")
                                .HasColumnType("boolean");

                            b1.Property<bool>("RequiresAuthentication")
                                .HasColumnType("boolean");

                            b1.Property<bool>("RequiresJavascript")
                                .HasColumnType("boolean");

                            b1.HasKey("FeedAnalysisId");

                            b1.ToTable("FeedAnalyses");

                            b1.ToJson("PreflightDetails");

                            b1.WithOwner()
                                .HasForeignKey("FeedAnalysisId");
                        });

                    b.Navigation("PreflightDetails")
                        .IsRequired();

                    b.Navigation("Selectors");
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.FeedItem", b =>
                {
                    b.HasOne("RSSVibe.Data.Entities.Feed", "Feed")
                        .WithMany("Items")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RSSVibe.Data.Entities.FeedParseRun", "FirstParseRun")
                        .WithMany()
                        .HasForeignKey("FirstParseRunId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("RSSVibe.Data.Entities.FeedParseRun", "LastParseRun")
                        .WithMany()
                        .HasForeignKey("LastParseRunId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("RSSVibe.Data.Models.FeedItemMetadata", "RawMetadata", b1 =>
                        {
                            b1.Property<Guid>("FeedItemId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Author")
                                .HasColumnType("text");

                            b1.Property<string>("Category")
                                .HasColumnType("text");

                            b1.Property<string>("ContentHash")
                                .HasColumnType("text");

                            b1.Property<Dictionary<string, string>>("CustomFields")
                                .HasColumnType("hstore");

                            b1.Property<string>("ImageUrl")
                                .HasColumnType("text");

                            b1.Property<string>("Language")
                                .HasColumnType("text");

                            b1.PrimitiveCollection<string[]>("Tags")
                                .HasColumnType("text[]");

                            b1.Property<int?>("WordCount")
                                .HasColumnType("integer");

                            b1.HasKey("FeedItemId");

                            b1.ToTable("FeedItems");

                            b1.ToJson("RawMetadata");

                            b1.WithOwner()
                                .HasForeignKey("FeedItemId");
                        });

                    b.Navigation("Feed");

                    b.Navigation("FirstParseRun");

                    b.Navigation("LastParseRun");

                    b.Navigation("RawMetadata")
                        .IsRequired();
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.FeedParseRun", b =>
                {
                    b.HasOne("RSSVibe.Data.Entities.Feed", "Feed")
                        .WithMany("ParseRuns")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RSSVibe.Data.Models.HttpResponseHeaders", "ResponseHeaders", b1 =>
                        {
                            b1.Property<Guid>("FeedParseRunId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CacheControl")
                                .HasColumnType("text");

                            b1.Property<int?>("ContentLength")
                                .HasColumnType("integer");

                            b1.Property<string>("ContentType")
                                .HasColumnType("text");

                            b1.Property<Dictionary<string, string>>("CustomHeaders")
                                .HasColumnType("hstore");

                            b1.Property<string>("ETag")
                                .HasColumnType("text");

                            b1.Property<string>("Expires")
                                .HasColumnType("text");

                            b1.Property<string>("LastModified")
                                .HasColumnType("text");

                            b1.Property<string>("Server")
                                .HasColumnType("text");

                            b1.HasKey("FeedParseRunId");

                            b1.ToTable("FeedParseRuns");

                            b1.ToJson("ResponseHeaders");

                            b1.WithOwner()
                                .HasForeignKey("FeedParseRunId");
                        });

                    b.Navigation("Feed");

                    b.Navigation("ResponseHeaders")
                        .IsRequired();
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.FeedParseRunItem", b =>
                {
                    b.HasOne("RSSVibe.Data.Entities.FeedItem", "FeedItem")
                        .WithMany("ParseRunItems")
                        .HasForeignKey("FeedItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RSSVibe.Data.Entities.FeedParseRun", "FeedParseRun")
                        .WithMany("ParseRunItems")
                        .HasForeignKey("FeedParseRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedItem");

                    b.Navigation("FeedParseRun");
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.Feed", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("ParseRuns");
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.FeedAnalysis", b =>
                {
                    b.Navigation("ApprovedFeed");
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.FeedItem", b =>
                {
                    b.Navigation("ParseRunItems");
                });

            modelBuilder.Entity("RSSVibe.Data.Entities.FeedParseRun", b =>
                {
                    b.Navigation("ParseRunItems");
                });
#pragma warning restore 612, 618
        }
    }
}
